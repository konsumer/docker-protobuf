#!/usr/bin/env bash

# build and run a gRPC JSON/HTTP gateway

# $1 - proto file
# $2 - name of import for API definition

# Generate gRPC stub
protoc -I. -I/protobuf --go_out=Mgoogle/api/annotations.proto=github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api,plugins=grpc:/tmp $1

# Generate reverse-proxy
protoc -I. -I/protobuf --grpc-gateway_out=logtostderr=true:/tmp $1

# Write an entrypoint
cat > /tmp/main.go << EOM
package main
import (
 "flag"
 "net/http"

 "github.com/golang/glog"
 "golang.org/x/net/context"
 "github.com/grpc-ecosystem/grpc-gateway/runtime"
 "google.golang.org/grpc"

 gw "$2"
)

var (
 echoEndpoint = flag.String("endpoint", "localhost:9090", "gRPC endpoint")
)

func run() error {
 ctx := context.Background()
 ctx, cancel := context.WithCancel(ctx)
 defer cancel()

 mux := runtime.NewServeMux()
 opts := []grpc.DialOption{grpc.WithInsecure()}
 err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux, *echoEndpoint, opts)
 if err != nil {
   return err
 }

 http.ListenAndServe(":8080", mux)
 return nil
}

func main() {
 flag.Parse()
 defer glog.Flush()

 if err := run(); err != nil {
   glog.Fatal(err)
 }
}
EOM

# build & run gateway
cd /tmp
go run main.go
